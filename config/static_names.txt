true Boolean:True:Value
false Boolean:False:Value
Void Class:Void:Value
Int Class:Int
Bool Class:Bool
String Class:String
let Let
disp Display:Method
if If:IfConditional
ifall IfAll:IfConditional
ifany IfAny:IfConditional
ifnone ifNone:IfConditional
else Else
isall IsAll:IsConditional
isany IsAny:IsConditional
isnone IsNone:IsConditional
fn Function
return Return
~ Kita
: Colon
; Semicolon
, Comma
_ With
! ConditionalMarking
{ StartBody
} CloseBody
( OpenExpr
) CloseExpr
[ OpenSquare
] CloseSquare
= Assignment
? TernaryQue
&& LogicalAnd:LogicalAndOr
!! LogicalOr:LogicalAndOr
& BitwiseAnd:Bitwise
| BitwiseOr:Bitwise
== Equals:Equality
!= NotEquals:Equality
> GreaterThan:Relational
< LesserThan:Relational
>= GreaterThanEquals:Relational
<= LesserThanEquals:Relational
/ Slash:BinaryPrecede:NonCommute
* Asterisk:BinaryPrecede:NonCommute
+ Add:Binary
- Negate:Binary